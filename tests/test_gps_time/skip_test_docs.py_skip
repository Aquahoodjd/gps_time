import pytest
import os
import sys
import subprocess
from pathlib import Path

MODULE_NAME: str = "gpstime"
def get_module_path():
    root_path = os.path.split(os.path.abspath(__file__))[0]
    return os.path.join(root_path, "..", "..", MODULE_NAME)


def gather_files():
    return list(Path(get_module_path()).rglob('*.py'))


@pytest.mark.parametrize("path", gather_files())
def test_documentation(path):
    result = subprocess.run(["pydocstyle", str(path)], stdout=subprocess.PIPE)
    out = str(result.stdout).split("\\n")
    pairs = [(out[i], out[i+1]) for i in range(0, len(out) - 1, 2)]

    module_path = get_module_path()
    module = os.path.relpath(path, module_path)
    print("\n\n\n" + module)
    print("-" * 80)

    present_loc = None
    failures = 0

    for p in pairs:
        description = p[1]
        _, location, _ = p[0].strip().split(":")

        parts = location.split(" ")
        if parts[2] == "module":
            line = parts[0]
            print(f"\tLine {line}: {description.strip()}")

        else:
            line, _, _, _type, new_loc = parts
            new_loc = new_loc[1:-1]
            if present_loc is None or new_loc != present_loc:
                present_loc = new_loc
                print("\n\t" + ("=" * 20) + " " + present_loc + " " + "=" * 20)
            print(f"\tLine {line}: {description.strip()}")
            failures += 1
    
    print("\n\n\n")

    if failures > 0:
        raise ValueError(f"{module} had {failures} documentation errors")


if __name__ == "__main__":
    path = gather_files()[0]
    result = subprocess.run(["pydocstyle", str(path)], stdout=subprocess.PIPE)
    out = str(result.stdout).split("\\n")
    pairs = [(out[i], out[i+1]) for i in range(0, len(out) - 1, 2)]

    module_path = get_module_path()
    module = os.path.relpath(path, module_path)
    print("\n" + module)
    print("-" * 80)

    present_loc = None
    failures = 0

    for p in pairs:
        description = p[1]
        _, location, _ = p[0].strip().split(":")

        parts = location.split(" ")
        if parts[2] == "module":
            line = parts[0]
            print(f"\tLine {line}: {description.strip()}")

        else:
            line, _, _, _type, new_loc = parts
            new_loc = new_loc[1:-1]
            if present_loc is None or new_loc != present_loc:
                present_loc = new_loc
                print("\n\t" + ("=" * 20) + " " + present_loc + " " + "=" * 20)
            print(f"\tLine {line}: {description.strip()}")
            failures += 1